{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Unison",
  "patterns": [
    {
      "include": "#doc_block"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#boolean"
    },
    {
      "include": "#numeric"
    },
    {
      "include": "#text"
    },
    {
      "include": "#char"
    },
    {
      "include": "#match_with"
    },
    {
      "include": "#control"
    },
    {
      "include": "#annotation"
    },
    {
      "include": "#forall"
    },
    {
      "include": "#arrow"
    },
    {
      "include": "#watch"
    },
    {
      "include": "#test_watch"
    },
    {
      "include": "#unsorted_reserved_chars"
    },
    {
      "include": "#unit"
    },
    {
      "include": "#unsorted_keywords"
    }
  ],
  "repository": {
    "doc_block": {
      "begin": "{{",
      "end": "}}",
      "beginCaptures": {
        "0": {
          "name": "string.interpolated.begin.doc.unison"
        }
      },
      "endCaptures": {
        "0": {
          "name": "string.interpolated.end.doc.unison"
        }
      },
      "patterns": [
        {
          "include": "#docheading"
        },
        {
          "include": "#docbold"
        },
        {
          "include": "#docitalic"
        },
        {
          "include": "#docstrike"
        },
        {
          "include": "#docmono"
        },
        {
          "include": "#doclist"
        },
        {
          "include": "#doceval"
        },
        {
          "include": "#docquasiquote"
        },
        {
          "include": "#doc_inline_example"
        },
        {
          "include": "#docref"
        },
        {
          "match": "[^\\s]+",
          "name": "string.interpolated.doc.word.unison"
        }
      ]
    },
    "docheading": {
      "begin": "(?:^|\\G)(#{1,6})\\s*(?=[\\S[^#]])",
      "end": "\\s*(#{1,6})?$\\n?",
      "name": "markup.heading.doc.unison"
    },
    "docitalic": {
      "begin": "_+",
      "end": "_+",
      "name": "markup.italic.doc.unison"
    },
    "docstrike": {
      "begin": "~~",
      "end": "~~",
      "name": "markup.strikethrough.doc.unison"
    },
    "docmono": {
      "begin": "''",
      "end": "''",
      "name": "markup.raw.doc.unison"
    },
    "doclist": {
      "begin": "^(\\s*)([-+*]|[\\d]+\\.)\\s+",
      "end": "(?=\\n)",
      "name": "markup.list, string.doc.unison",
      "captures": {
        "2": {
          "name": "markup.punctuation.list.beginning.doc.unison"
        }
      }
    },
    "docbold": {
      "begin": "\\*+(?=[[^\\s]])",
      "end": "[^\\s]\\*+",
      "name": "markup.bold.doc.unison"
    },
    "docquasiquote": {
      "begin": "{{",
      "end": "}}",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "doc_inline_example": {
      "begin": "``",
      "end": "``",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "doceval": {
      "begin": "@eval\\s*{|^\\s*````*|@typecheck\\s*````*",
      "end": "}|^\\s*````*",
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.doc.directive.begin.unison"
        }
      },
      "endCaptures": {
        "0": {
          "name": "meta.preprocessor.doc.directive.end.unison"
        }
      }
    },
    "docref": {
      "match": "((@source|@signature|@signatures|@foldedSource)\\s*)?({)((type\\s+)?[\\w\\.'()!@#$%^&*+-]+)(})",
      "captures": {
        "1": {
          "name": "meta.preprocessor.doc.directive.begin.unison"
        },
        "2": {
          "name": "meta.preprocessor.doc.directive.begin.unison"
        },
        "3": {
          "name": "meta.preprocessor.doc.directive.begin.unison"
        },
        "4": {
          "name": "variable.name.doc.ref.unison"
        },
        "5": {
          "name": "keyword.control.unison"
        },
        "6": {
          "name": "meta.preprocessor.doc.directive.end.unison"
        }
      }
    },
    "annotation": {
      "name": "meta.function.type-declaration.unison",
      "match": "([^\\r\\n\\t\\f\\v \"]+)\\s*(:)(?=\\s)",
      "captures": {
        "1": {
          "name": "entity.name.function.unison"
        },
        "2": {
          "name": "keyword.other.colon.unison"
        }
      }
    },
    "boolean": {
      "patterns": [
        {
          "include": "#true"
        },
        {
          "include": "#false"
        }
      ]
    },
    "true": {
      "match": "true",
      "name": "constant.language.boolean.true.unison"
    },
    "false": {
      "match": "false",
      "name": "constant.language.boolean.false.unison"
    },
    "match_with": {
      "match": "(\\s|^)(match|with|->)(?=\\s|$)",
      "captures": {
        "2": {
          "name": "keyword.control.case.unison"
        }
      }
    },
    "comment": {
      "patterns": [
        {
          "include": "#eof_comment"
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#block_comment"
        }
      ]
    },
    "eof_comment": {
      "name": "comment.block.eof.unison",
      "begin": "^---",
      "end": "\\z"
    },
    "block_comment": {
      "name": "comment.block.unison",
      "begin": "{-",
      "end": "-}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.begin.unison"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.unison"
        }
      }
    },
    "line_comment": {
      "patterns": [
        {
          "begin": "(^\\s+)?(?=--)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.unison"
            }
          },
          "end": "(?=$)",
          "patterns": [
            {
              "name": "comment.line.double-dash.unison",
              "begin": "(?<!-)--(?:(?!-)|(?=--))",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.unison"
                }
              },
              "end": "(?=$)"
            }
          ]
        }
      ]
    },
    "control": {
      "match": "\\b(if|then|else|and|or)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.unison"
        }
      }
    },
    "numeric": {
      "patterns": [
        {
          "include": "#float"
        },
        {
          "include": "#int"
        }
      ]
    },
    "float": {
      "match": "([^+\\-\\w\\d]|^)([+-]?\\d+\\.\\d*)",
      "captures": {
        "2": {
          "name": "constant.numeric.decimal.unison"
        }
      }
    },
    "int": {
      "match": "([^\\w\\d]|^)([+-]?\\d+)",
      "captures": {
        "2": {
          "name": "constant.numeric.integer.unison"
        }
      }
    },
    "text": {
      "name": "string.quoted.double.unison",
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.unison"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.unison"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.unison",
          "match": "\\\\."
        }
      ]
    },
    "char": {
      "name": "string.quoted.single.unison",
      "match": "([?])(([\\\\].)|([^\\\\]))",
      "captures": {
        "1": {
          "name": "punctuation.definition.string.begin.unison"
        },
        "3": {
          "name": "constant.character.escape.unison"
        },
        "4": {
          "name": "string.quoted.single.unison"
        }
      }
    },
    "forall": {
      "match": "(\\s|^)(forall|âˆ€)(?=\\s|^)",
      "captures": {
        "2": {
          "name": "keyword.other.forall.unison"
        }
      }
    },
    "arrow": {
      "match": "(->)",
      "captures": {
        "1": {
          "name": "keyword.other.arrow.unison"
        }
      }
    },
    "watch": {
      "match": "^(>)",
      "captures": {
        "1": {
          "name": "keyword.other.watch.expression.unison"
        }
      }
    },
    "test_watch": {
      "match": "^(test>)",
      "captures": {
        "1": {
          "name": "keyword.other.test.watch.expression.unison"
        }
      }
    },
    "use": {
      "match": "(\\s|^)(use)(?=\\s|$)",
      "captures": {
        "2": {
          "name": "keyword.control.import.unison"
        }
      }
    },
    "unsorted_keywords": {
      "match": "(\\s|^)(let|alias|handle|in|namespace|type|ability|where|unique|structural|use|with|\\|\\||&&)(?=\\s|$)",
      "captures": {
        "2": {
          "name": "keyword.control.unison"
        }
      }
    },
    "unsorted_reserved_chars": {
      "match": "(,)|('|!)|(\\[)|(\\])|({)|(})|(@)|(\\|)|(#)",
      "captures": {
        "1": {
          "name": "punctuation.separator.delimiter.unison"
        },
        "2": {
          "name": "punctuation.definition.delayed.unison"
        },
        "3": {
          "name": "punctuation.definition.list.begin.unison"
        },
        "4": {
          "name": "punctuation.definition.list.end.unison"
        },
        "5": {
          "name": "punctuation.definition.ability.begin.unison"
        },
        "6": {
          "name": "punctuation.definition.ability.end.unison"
        },
        "7": {
          "name": "punctuation.operator.assignment.as.unison"
        },
        "8": {
          "name": "punctuation.separator.pipe.unison"
        },
        "9": {
          "name": "punctuation.definition.hash.unison"
        }
      }
    },
    "unit": {
      "match": "(\\()(\\))",
      "name": "constant.language.unit.unison",
      "captures": {
        "1": {
          "name": "punctuation.paren.begin.unison"
        },
        "2": {
          "name": "punctuation.paren.end.unison"
        }
      }
    }
  },
  "scopeName": "source.u"
}